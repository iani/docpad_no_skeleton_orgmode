// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var OrgModePlugin, _ref;
    return OrgModePlugin = (function(_super) {
      __extends(OrgModePlugin, _super);

      function OrgModePlugin() {
        _ref = OrgModePlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      OrgModePlugin.prototype.name = 'orgmode';

      OrgModePlugin.prototype.config = {
        "default": {
          headerOffset: 1,
          suppressSubScriptHandling: false,
          suppressAutoLink: false,
          showToc: true,
          showTitle: true,
          exportFromLineNumber: false,
          suppressCheckboxHandling: false,
          translateSymbolArrow: false,
          htmlClassPrefix: null,
          htmlIdPrefix: null
        }
      };

      OrgModePlugin.prototype.render = function(opts) {
        var Org, cfg, doc, err, inExtension, k, orgDocument, orgHTMLDocument, orgParser, outExtension, templateData, v, _ref1, _ref2, _ref3;
        inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData;
        doc = opts.templateData.document;
        cfg = {};
        _ref1 = this.config["default"];
        for (k in _ref1) {
          v = _ref1[k];
          cfg[k] = v;
        }
        _ref2 = this.config;
        for (k in _ref2) {
          v = _ref2[k];
          if (k !== "default") {
            cfg[k] = v;
          }
        }
        _ref3 = doc.orgmode;
        for (k in _ref3) {
          v = _ref3[k];
          cfg[k] = v;
        }
        if (inExtension === 'org' && outExtension === 'html') {
          Org = require('org');
          try {
            orgParser = new Org.Parser;
            orgDocument = orgParser.parse(opts.content);
            templateData.document.title = orgDocument.title || templateData.document.title;
            if (!orgDocument.title && templateData.document.title) {
              orgDocument.title = templateData.document.title;
            }
            orgHTMLDocument = orgDocument.convert(Org.ConverterHTML, {
              headerOffset: cfg.headerOffset,
              exportFromLineNumber: cfg.exportFromLineNumber,
              suppressSubScriptHandling: cfg.suppressSubScriptHandling,
              suppressAutoLink: cfg.suppressAutoLink,
              suppressCheckboxHandling: cfg.suppressCheckboxHandling,
              translateSymbolArrow: cfg.translateSymbolArrow,
              htmlClassPrefix: cfg.htmlClassPrefix,
              htmlIdPrefix: cfg.htmlIdPrefix
            });
            opts.content = orgHTMLDocument.contentHTML;
            if (cfg.showToc) {
              opts.content = orgHTMLDocument.tocHTML + "\n" + opts.content;
            }
            if (cfg.showTitle) {
              opts.content = orgHTMLDocument.titleHTML + "\n" + opts.content;
            }
          } catch (_error) {
            err = _error;
            return err;
          }
        }
        return true;
      };

      return OrgModePlugin;

    })(BasePlugin);
  };

}).call(this);
